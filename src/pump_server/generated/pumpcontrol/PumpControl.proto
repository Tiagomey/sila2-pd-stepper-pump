syntax = "proto3";

import "SiLAFramework.proto";

package sila2.unitelabs.core.pumpcontrol.v1;

/* Feature to control a pump via SiLA 2. */
service PumpControl {
  /* Start the pump operation. */
  rpc StartPump (sila2.unitelabs.core.pumpcontrol.v1.StartPump_Parameters) returns (sila2.unitelabs.core.pumpcontrol.v1.StartPump_Responses) {}
  /* Stop the pump operation. */
  rpc StopPump (sila2.unitelabs.core.pumpcontrol.v1.StopPump_Parameters) returns (sila2.unitelabs.core.pumpcontrol.v1.StopPump_Responses) {}
  /* Get Status Information of the Pump */
  rpc GetStatus (sila2.unitelabs.core.pumpcontrol.v1.GetStatus_Parameters) returns (sila2.unitelabs.core.pumpcontrol.v1.GetStatus_Responses) {}
  /* Set the pumping velocity. */
  rpc SetVelocity (sila2.unitelabs.core.pumpcontrol.v1.SetVelocity_Parameters) returns (sila2.unitelabs.core.pumpcontrol.v1.SetVelocity_Responses) {}
  /* Set the acceleration of the pump. */
  rpc SetAcceleration (sila2.unitelabs.core.pumpcontrol.v1.SetAcceleration_Parameters) returns (sila2.unitelabs.core.pumpcontrol.v1.SetAcceleration_Responses) {}
  /* Set the voltage supplied to stepper Motor(only 5,9,12,15,20 is allowed). */
  rpc SetVoltage (sila2.unitelabs.core.pumpcontrol.v1.SetVoltage_Parameters) returns (sila2.unitelabs.core.pumpcontrol.v1.SetVoltage_Responses) {}
  /* Suck liquid in ml. */
  rpc Suck (sila2.unitelabs.core.pumpcontrol.v1.Suck_Parameters) returns (sila2.unitelabs.core.pumpcontrol.v1.Suck_Responses) {}
  /* Pump liquid in ml. */
  rpc Pump (sila2.unitelabs.core.pumpcontrol.v1.Pump_Parameters) returns (sila2.unitelabs.core.pumpcontrol.v1.Pump_Responses) {}
  /* Current status of the pump. */
  rpc Subscribe_PumpStatus (sila2.unitelabs.core.pumpcontrol.v1.Subscribe_PumpStatus_Parameters) returns (stream sila2.unitelabs.core.pumpcontrol.v1.Subscribe_PumpStatus_Responses) {}
}

/* Parameters for StartPump */
message StartPump_Parameters {
  sila2.org.silastandard.Integer Velocity = 1;  /* Start the pump with given Velocity (steps per second) */
}

/* Responses of StartPump */
message StartPump_Responses {
}

/* Parameters for StopPump */
message StopPump_Parameters {
}

/* Responses of StopPump */
message StopPump_Responses {
}

/* Parameters for GetStatus */
message GetStatus_Parameters {
}

/* Responses of GetStatus */
message GetStatus_Responses {
}

/* Parameters for SetVelocity */
message SetVelocity_Parameters {
  sila2.org.silastandard.Real Velocity = 1;  /* Velocity in steps per second used in Target specific commands */
}

/* Responses of SetVelocity */
message SetVelocity_Responses {
}

/* Parameters for SetAcceleration */
message SetAcceleration_Parameters {
  sila2.org.silastandard.Real Acceleration = 1;  /* Acceleration in steps/sÂ² */
}

/* Responses of SetAcceleration */
message SetAcceleration_Responses {
}

/* Parameters for SetVoltage */
message SetVoltage_Parameters {
  sila2.org.silastandard.Integer Voltage = 1;  /* Target voltage in volts. */
}

/* Responses of SetVoltage */
message SetVoltage_Responses {
}

/* Parameters for Suck */
message Suck_Parameters {
  sila2.org.silastandard.Real Amount = 1;  /* Amount in milliliters to suck */
}

/* Responses of Suck */
message Suck_Responses {
}

/* Parameters for Pump */
message Pump_Parameters {
  sila2.org.silastandard.Real Amount = 1;  /* Amount in milliliters to pump */
}

/* Responses of Pump */
message Pump_Responses {
}

/* Parameters for PumpStatus */
message Subscribe_PumpStatus_Parameters {
}

/* Responses of PumpStatus */
message Subscribe_PumpStatus_Responses {
  sila2.org.silastandard.String PumpStatus = 1;  /* Current status of the pump. */
}
