# Generated by sila2.code_generator; sila2.__version__: 0.12.2
# -----
# This class does not do anything useful at runtime. Its only purpose is to provide type annotations.
# Since sphinx does not support .pyi files (yet?), this is a .py file.
# -----

from __future__ import annotations

from typing import TYPE_CHECKING

if TYPE_CHECKING:

    from typing import Iterable, Optional

    from pumpcontrol_types import (
        GetStatus_Responses,
        Pump_Responses,
        SetAcceleration_Responses,
        SetVelocity_Responses,
        SetVoltage_Responses,
        StartPump_Responses,
        StopPump_Responses,
        Suck_Responses,
    )
    from sila2.client import ClientMetadataInstance, ClientObservableProperty


class PumpControlClient:
    """
    Feature to control a pump via SiLA 2.
    """

    PumpStatus: ClientObservableProperty[str]
    """
    Current status of the pump.
    """

    def StartPump(
        self, Velocity: int, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> StartPump_Responses:
        """
        Start the pump operation.
        """
        ...

    def StopPump(self, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None) -> StopPump_Responses:
        """
        Stop the pump operation.
        """
        ...

    def GetStatus(self, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None) -> GetStatus_Responses:
        """
        Get Status Information of the Pump
        """
        ...

    def SetVelocity(
        self, Velocity: float, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> SetVelocity_Responses:
        """
        Set the pumping velocity.
        """
        ...

    def SetAcceleration(
        self, Acceleration: float, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> SetAcceleration_Responses:
        """
        Set the acceleration of the pump.
        """
        ...

    def SetVoltage(
        self, Voltage: int, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> SetVoltage_Responses:
        """
        Set the voltage supplied to stepper Motor(only 5,9,12,15,20 is allowed).
        """
        ...

    def Suck(self, Amount: float, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None) -> Suck_Responses:
        """
        Suck liquid in ml.
        """
        ...

    def Pump(self, Amount: float, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None) -> Pump_Responses:
        """
        Pump liquid in ml.
        """
        ...
