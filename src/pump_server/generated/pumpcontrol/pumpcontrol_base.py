# Generated by sila2.code_generator; sila2.__version__: 0.12.2
from __future__ import annotations

from abc import ABC, abstractmethod
from queue import Queue
from typing import TYPE_CHECKING, Optional, Union

from sila2.server import FeatureImplementationBase, MetadataDict


from .pumpcontrol_types import (
    Direction_Responses,
    InitPump_Responses,
    Pump_Responses,
    StartPump_Responses,
    StopPump_Responses,
    Suck_Responses,
)

if TYPE_CHECKING:

    from typing import TypeVar

    from sila2.server import SilaServer

    Server = TypeVar("Server", bound=SilaServer)


class PumpControlBase(FeatureImplementationBase, ABC):
    parent_server: Server

    _PumpStatus_producer_queue: Queue[Union[str, Exception]]
    _PumpStatus_current_value: str

    def __init__(self, parent_server: Server):
        """
        Feature to control a pump via SiLA 2.
        """
        super().__init__(parent_server=parent_server)

        self._PumpStatus_producer_queue = Queue()

    def update_PumpStatus(self, PumpStatus: str, queue: Optional[Queue[str]] = None) -> None:
        """
        Current status of the pump.

        This method updates the observable property 'PumpStatus'.

        :param queue: The queue to send updates to. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._PumpStatus_producer_queue
            self._PumpStatus_current_value = PumpStatus
        queue.put(PumpStatus)

    def PumpStatus_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[str]]:
        """
        Current status of the pump.

        This method is called when a client subscribes to the observable property 'PumpStatus'

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Optional `Queue` that should be used for updating this property.
            If None, the default Queue will be used.
        """

    def abort_PumpStatus_subscriptions(self, error: Exception, queue: Optional[Queue[str]] = None) -> None:
        """
        Current status of the pump.

        This method aborts subscriptions to the observable property 'PumpStatus'.

        :param error: The Exception to be sent to the subscribing client.
            If it is no DefinedExecutionError or UndefinedExecutionError, it will be wrapped in an UndefinedExecutionError.
        :param queue: The queue to abort. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._PumpStatus_producer_queue
        queue.put(error)

    @property
    def current_PumpStatus(self) -> str:
        try:
            return self._PumpStatus_current_value
        except AttributeError:
            raise AttributeError("Observable property PumpStatus has never been set")

    @abstractmethod
    def InitPump(self, ComPort: str, *, metadata: MetadataDict) -> InitPump_Responses:
        """
        Initialize the pump before usage.


        :param ComPort: Com port to connect PDStepper via Serial

        :param metadata: The SiLA Client Metadata attached to the call

        """

    @abstractmethod
    def StartPump(self, Start: bool, *, metadata: MetadataDict) -> StartPump_Responses:
        """
        Start the pump operation.


        :param Start: Start the pump: true to activate

        :param metadata: The SiLA Client Metadata attached to the call

        """

    @abstractmethod
    def StopPump(self, Stop: bool, *, metadata: MetadataDict) -> StopPump_Responses:
        """
        Stop the pump operation.


        :param Stop: Stop the pump: true to deactivate

        :param metadata: The SiLA Client Metadata attached to the call

        """

    @abstractmethod
    def Suck(self, Amount: float, *, metadata: MetadataDict) -> Suck_Responses:
        """
        Suck liquid in ml.


        :param Amount: Amount in milliliters to suck

        :param metadata: The SiLA Client Metadata attached to the call

        """

    @abstractmethod
    def Pump(self, Amount: float, *, metadata: MetadataDict) -> Pump_Responses:
        """
        Pump liquid in ml.


        :param Amount: Amount in milliliters to pump

        :param metadata: The SiLA Client Metadata attached to the call

        """

    @abstractmethod
    def Direction(self, Direction: bool, *, metadata: MetadataDict) -> Direction_Responses:
        """
        Set pump direction: Forward or Backward.


        :param Direction: Direction: 'Forward' or 'Backward'

        :param metadata: The SiLA Client Metadata attached to the call

        """
